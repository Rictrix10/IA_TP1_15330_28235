    def validate_action(self, action: DiagonalBlocksAction) -> bool:
        row = action.get_row()
        col = action.get_col()
        piece = action.get_piece()
        option = action.get_option()
        peca_selecionada = action.get_peca()

        
        # valid piece
        if piece < 0 or piece > 20:
            return False
        
        # valid column
        if col < 0 or col >= self.num_cols:
            return False

        # valid row
        if row < 0 or row >= self.num_rows:
            return False
        
        # free pieces

        erro = 0
        for x in range(len(peca_selecionada)):
            row = peca_selecionada[x][0]
            col = peca_selecionada[x][1] 
            if self.grid[row][col] == 0 or self.grid[row][col] == 1:
                erro += 1
        if erro > 0:
            print("Não pode jogar aí, peças não se podem sobrepor")
            return False
        
        # non-repeating play
        if self.__acting_player == 0:
            #if piece in self.__pieceNorepeatP0:
            if piece not in self.__pecasP0:
                print("Essa peça já foi jogada, jogue outra")
                print(self.__pecasP0)
                return False
        else:
            #if piece in self.__pieceNorepeatP1:
            if piece not in self.__pecasP1:
                print("Essa peça já foi jogada, jogue outra")
                print(self.__pecasP0)
                return False 

        # play in diagonal
        coordenadas = self.__save_diagonais()

        encontrou = 0
        if self.__turns_count > 2:
            row = peca_selecionada[0][0]
            col = peca_selecionada[0][1]
            if (row,col) in coordenadas:
                encontrou += 1
            if encontrou == 0:
                print("Não pode jogar aí, tem que jogar numa diagonal de uma das suas peças")
                print(coordenadas)
                return False
            #return True
        
        #play in board
        
        saiu = 0
        for x in range(len(peca_selecionada)):
            row = peca_selecionada[x][0]
            col = peca_selecionada[x][1]
            if row < 0 or row >= self.num_rows:
                saiu += 1
            if col < 0 or col >= self.num_cols:
                saiu += 1
        if saiu > 0:
            print("Não pode jogar aí, a peça tem de ser jogada dentro da tabuleiro")
            return False
        
        #self.possible_actions()
        return True